using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Fragments;
using Content.Shared.Mech.Components;
using Content.Shared.Mech;
using Content.Shared.Atmos;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using System.Linq;

namespace Content.Client.Mech.Ui;

[GenerateTypedNameReferences]
public sealed partial class MechMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _ent = default!;

    private EntityUid _mech;

    public event Action<EntityUid>? OnRemoveButtonPressed;

    public Action<string>? NameChanged;

    public event Action<bool>? OnAirtightChanged;
    public event Action? OnDnaLockRegister;
    public event Action? OnDnaLockToggle;
    public event Action? OnDnaLockReset;
    public event Action? OnCardLockRegister;
    public event Action? OnCardLockToggle;
    public event Action? OnCardLockReset;

    public MechMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        ExternalButton.OnToggled += args =>
        {
            if (args.Pressed)
            {
                InternalButton.Pressed = false;
                OnAirtightChanged?.Invoke(false);
            }
        };

        InternalButton.OnToggled += args =>
        {
            if (args.Pressed)
            {
                ExternalButton.Pressed = false;
                OnAirtightChanged?.Invoke(true);
            }
        };

        DnaLockButton.OnPressed += _ => OnDnaLockRegister?.Invoke();
        DnaLockResetButton.OnPressed += _ => OnDnaLockReset?.Invoke();
        CardLockButton.OnPressed += _ => OnCardLockRegister?.Invoke();
        CardLockResetButton.OnPressed += _ => OnCardLockReset?.Invoke();
    }

    public void SetEntity(EntityUid uid)
    {
        MechView.SetEntity(uid);
        _mech = uid;

        NameLabel.Text = _ent.GetComponent<MetaDataComponent>(_mech).EntityName;
    }

    public void UpdateMechStats()
    {
        if (!_ent.TryGetComponent<MechComponent>(_mech, out var mechComp))
            return;

        var integrityPercent = mechComp.Integrity / mechComp.MaxIntegrity;
        IntegrityDisplayBar.Value = integrityPercent.Float();
        IntegrityDisplay.Text = Loc.GetString("mech-integrity-display", ("amount", (integrityPercent * 100).Int()));

        if (mechComp.MaxEnergy != 0f)
        {
            var energyPercent = mechComp.Energy / mechComp.MaxEnergy;
            EnergyDisplayBar.Value = energyPercent.Float();
            EnergyDisplay.Text = Loc.GetString("mech-energy-display", ("amount", (energyPercent * 100).Int()));
        }
        else
        {
            EnergyDisplayBar.Value = 0f;
            EnergyDisplay.Text = Loc.GetString("mech-energy-missing");
        }

        SlotDisplay.Text = Loc.GetString("mech-slot-display",
            ("amount", mechComp.MaxEquipmentAmount - mechComp.EquipmentContainer.ContainedEntities.Count));
    }

    public void UpdateState(MechBoundUiState state)
    {
        ExternalButton.Pressed = !state.IsAirtight;
        InternalButton.Pressed = state.IsAirtight;

        // Update lock buttons
        UpdateLockButtons(state);
    }

    private void UpdateLockButtons(MechBoundUiState state)
    {
        UpdateDnaLockButton(state);
        UpdateCardLockButton(state);
    }

    private void UpdateDnaLockButton(MechBoundUiState state)
    {
        // Clear existing event subscriptions to prevent multiple subscriptions
        DnaLockButton.OnPressed = null;

        if (state.DnaLockRegistered)
        {
            if (state.DnaLockActive)
            {
                DnaLockButton.Text = Loc.GetString("mech-lock-deactivate");
                DnaLockButton.Pressed = true; // Button appears pressed/active when lock is active
                DnaLockButton.OnPressed += _ => OnDnaLockToggle?.Invoke();
            }
            else
            {
                DnaLockButton.Text = Loc.GetString("mech-lock-activate");
                DnaLockButton.Pressed = false; // Button appears normal when lock is inactive
                DnaLockButton.OnPressed += _ => OnDnaLockToggle?.Invoke();
            }
            DnaLockResetButton.Visible = true;
        }
        else
        {
            DnaLockButton.Text = Loc.GetString("mech-lock-register");
            DnaLockButton.Pressed = false; // Button appears normal when not registered
            DnaLockButton.OnPressed += _ => OnDnaLockRegister?.Invoke();
            DnaLockResetButton.Visible = false;
        }
    }

    private void UpdateCardLockButton(MechBoundUiState state)
    {
        // Clear existing event subscriptions to prevent multiple subscriptions
        CardLockButton.OnPressed = null;

        if (state.CardLockRegistered)
        {
            if (state.CardLockActive)
            {
                CardLockButton.Text = Loc.GetString("mech-lock-deactivate");
                CardLockButton.Pressed = true; // Button appears pressed/active when lock is active
                CardLockButton.OnPressed += _ => OnCardLockToggle?.Invoke();
            }
            else
            {
                CardLockButton.Text = Loc.GetString("mech-lock-activate");
                CardLockButton.Pressed = false; // Button appears normal when lock is inactive
                CardLockButton.OnPressed += _ => OnCardLockToggle?.Invoke();
            }
            CardLockResetButton.Visible = true;
        }
        else
        {
            CardLockButton.Text = Loc.GetString("mech-lock-register");
            CardLockButton.Pressed = false; // Button appears normal when not registered
            CardLockButton.OnPressed += _ => OnCardLockRegister?.Invoke();
            CardLockResetButton.Visible = false;
        }
    }

    public void UpdateEquipmentView(List<NetEntity>? equipment = null)
    {
        if (equipment == null)
        {
            if (!_ent.TryGetComponent<MechComponent>(_mech, out var mechComp))
                return;
            equipment = new List<NetEntity>();
            foreach (var ent in mechComp.EquipmentContainer.ContainedEntities)
                equipment.Add(_ent.GetNetEntity(ent));
        }

        EquipmentControlContainer.Children.Clear();
        foreach (var netEnt in equipment)
        {
            var ent = _ent.GetEntity(netEnt);
            if (!_ent.TryGetComponent<MetaDataComponent>(ent, out var metaData))
                continue;

            var uicomp = _ent.GetComponentOrNull<UIFragmentComponent>(ent);
            var ui = uicomp?.Ui?.GetUIFragmentRoot();

            var control = new MechEquipmentControl(ent, metaData.EntityName, ui);

            var entityToRemove = ent;
            control.OnRemoveButtonPressed += () => OnRemoveButtonPressed?.Invoke(entityToRemove);

            EquipmentControlContainer.AddChild(control);
        }
    }
}
