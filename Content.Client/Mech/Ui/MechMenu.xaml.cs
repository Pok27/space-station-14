using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Fragments;
using Content.Shared.Mech.Components;
using Content.Shared.Mech;
using Content.Shared.Atmos;
using Content.Shared.Mech.Equipment.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using System.Linq;
using Robust.Client.UserInterface;
using Content.Shared.Mech.EntitySystems;
using Content.Client.Mech.Ui.Equipment;
using Robust.Shared.IoC;

namespace Content.Client.Mech.Ui;

/// <summary>
/// Interface control for mechs.
/// </summary>
/// <seealso cref="MechBoundUserInterface"/>
[GenerateTypedNameReferences]
public sealed partial class MechMenu : FancyWindow
{
    // Dependencies
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly ILocalizationManager _loc = default!;

    // State
    private EntityUid _mech;
    private bool _hasAccess = false;
    private bool _pilotPresent = false;
    private BoundUserInterface? _parentBui;

    // Events for the BUI to subscribe to
    public event Action<EntityUid>? OnRemoveButtonPressed;
    public event Action<EntityUid>? OnRemoveModuleButtonPressed;

    public event Action<bool>? OnAirtightChanged;
    public event Action<bool>? OnFanToggle;
    public event Action<bool>? OnFilterToggle;
    public event Action? OnDnaLockRegister;
    public event Action? OnDnaLockToggle;
    public event Action? OnDnaLockReset;
    public event Action? OnCardLockRegister;
    public event Action? OnCardLockToggle;
    public event Action? OnCardLockReset;
    public event Action? OnCabinPurge;

    public MechMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        InitializeEventHandlers();
    }

    public void SetEntity(EntityUid entity)
    {
        _mech = entity;

        this.SetInfoFromEntity(_entityManager, _mech);

        MechView.SetEntity(entity);
    }

    public void SetParentBui(BoundUserInterface parentBui)
    {
        _parentBui = parentBui;
    }

    private void InitializeEventHandlers()
    {
        // Cabin controls with access checks
        AirtightButton.OnToggled += args => OnAirtightChanged?.Invoke(args.Pressed);
        CabinPurgeButton.OnPressed += _ => OnCabinPurge?.Invoke();

        // Fan controls
        FanToggle.StateChanged += isOn => OnFanToggle?.Invoke(isOn);

        // Lock controls
        DnaLockRegisterButton.OnPressed += _ => OnDnaLockRegister?.Invoke();
        DnaLockBlockButton.OnPressed += _ => OnDnaLockToggle?.Invoke();
        DnaLockResetButton.OnPressed += _ => OnDnaLockReset?.Invoke();

        CardLockRegisterButton.OnPressed += _ => OnCardLockRegister?.Invoke();
        CardLockBlockButton.OnPressed += _ => OnCardLockToggle?.Invoke();
        CardLockResetButton.OnPressed += _ => OnCardLockReset?.Invoke();

        // Filter control
        FilterEnabledCheck.OnToggled += args => OnFilterToggle?.Invoke(args.Pressed);
    }

    public void UpdateMechStats()
    {
        if (_lastState != null)
        {
            if (_lastState.MaxIntegrity > 0f)
            {
                var integrityPercent = _lastState.Integrity / _lastState.MaxIntegrity;
                IntegrityDisplayBar.Value = integrityPercent;
                IntegrityDisplay.Text = _loc.GetString("mech-integrity-display", ("amount", (int)(integrityPercent * 100)));
            }
            else
            {
                IntegrityDisplayBar.Value = 0f;
                IntegrityDisplay.Text = _loc.GetString("mech-integrity-display", ("amount", 0));
            }

            if (_lastState.MaxEnergy > 0f)
            {
                var energyPercent = _lastState.Energy / _lastState.MaxEnergy;
                EnergyDisplayBar.Value = energyPercent;
                EnergyDisplay.Text = _loc.GetString("mech-energy-display", ("amount", (int)(energyPercent * 100)));
            }
            else
            {
                EnergyDisplayBar.Value = 0f;
                EnergyDisplay.Text = _loc.GetString("mech-energy-missing");
            }

            SlotDisplay.Text = _loc.GetString("mech-equipment-slot-display",
                ("used", _lastState.EquipmentUsed), ("max", _lastState.MaxEquipmentAmount));

            ModuleSlotDisplay.Text = _loc.GetString("mech-module-slot-display",
                ("used", _lastState.ModuleSpaceUsed), ("max", _lastState.ModuleSpaceMax));
        }
    }

    public void UpdateMechState(MechBoundUiState state)
    {
        _lastState = state;
        _pilotPresent = state.PilotPresent;

        var anyLockRegistered = state.DnaLockRegistered || state.CardLockRegistered;
        if (!anyLockRegistered)
            _hasAccess = true;

        FanToggle.Visible = state.HasFanModule;
        FilterEnabledCheck.Visible = state.HasFanModule;
        FanMissingLabel.Visible = !state.HasFanModule;

        CabinPurgeButton.Text = _loc.GetString("mech-cabin-purge");
        CabinPurgeButton.Disabled = !state.CabinPurgeAvailable;

        if (AirtightButton.Pressed != state.IsAirtight)
            AirtightButton.Pressed = state.IsAirtight;

        if (state.HasFanModule)
        {
            if (FanToggle.IsOn != state.FanActive)
                FanToggle.IsOn = state.FanActive;

            if (FilterEnabledCheck.Pressed != state.FilterEnabled)
                FilterEnabledCheck.Pressed = state.FilterEnabled;
        }

        CabinGasLabel.Text = _loc.GetString("mech-cabin-pressure-level", ("level", $"{state.CabinGasLevel:F1}"));

        if (state.HasGasModule)
        {
            TankPressureLabel.Text = _loc.GetString("mech-tank-pressure-level", ("state", "ok"), ("pressure", state.TankPressure.ToString("0.##")));
            TankPressureLabel.FontColorOverride = Color.White;
        }
        else
        {
            TankPressureLabel.Text = _loc.GetString("mech-tank-pressure-level", ("state", "na"));
            TankPressureLabel.FontColorOverride = Color.Gray;
        }

        UpdateFanStatusDisplay(state.FanState);
        UpdateLockInfoLabels(state);
        UpdateLockButtons(state);
        UpdateEquipmentView(state.Equipment);
        UpdateModuleView(state.Modules);

        var isLocked = state.IsLocked;
        var noAccessActive = isLocked && !_hasAccess;
        SettingsGrid.Visible = !noAccessActive;
        SettingsNoAccessPanel.Visible = noAccessActive;

        var disableRemove = _pilotPresent || (state.IsLocked && !_hasAccess);
        foreach (var control in EquipmentControlContainer.Children.OfType<MechEquipmentControl>())
        {
            control.SetRemoveDisabled(disableRemove);
        }
        foreach (var control in ModuleControlContainer.Children.OfType<MechEquipmentControl>())
        {
            control.SetRemoveDisabled(disableRemove);
        }
    }

    private void UpdateFanStatusDisplay(MechFanState fanState)
    {
        var stateKey = fanState switch
        {
            MechFanState.Off => "off",
            MechFanState.On => "on",
            MechFanState.Idle => "idle",
            _ => "na"
        };
        var stateColorKey = fanState switch
        {
            MechFanState.Off => Color.Red,
            MechFanState.On => Color.Green,
            MechFanState.Idle => Color.Yellow,
            _ => Color.Gray
        };

        FanStatusLabel.Text = _loc.GetString("mech-fan-status", ("state", stateKey));
        FanStatusLabel.FontColorOverride = stateColorKey;
    }

    private void UpdateLockInfoLabels(MechBoundUiState state)
    {
        if (state.DnaLockRegistered && !string.IsNullOrEmpty(state.OwnerDna))
        {
            DnaLockInfoLabel.Text = _loc.GetString("mech-lock-dna-info", ("dna", state.OwnerDna));
        }
        else
        {
            DnaLockInfoLabel.Text = _loc.GetString("mech-lock-not-set");
        }

        if (state.CardLockRegistered && !string.IsNullOrEmpty(state.OwnerJobTitle))
        {
            CardLockInfoLabel.Text = _loc.GetString("mech-lock-card-info", ("name", state.OwnerJobTitle));
        }
        else
        {
            CardLockInfoLabel.Text = _loc.GetString("mech-lock-not-set");
        }
    }

    private void UpdateLockButtons(MechBoundUiState state)
    {
        var (dnaRegistered, dnaActive, _) = GetLockState(state, MechLockType.Dna);
        var (cardRegistered, cardActive, _) = GetLockState(state, MechLockType.Card);

        // DNA Lock Buttons
        DnaLockRegisterButton.Visible = !dnaRegistered;
        DnaLockBlockButton.Visible = dnaRegistered;
        DnaLockResetButton.Visible = dnaRegistered;
        DnaLockBlockButton.Text = _loc.GetString(dnaActive ? "mech-lock-deactivate" : "mech-lock-activate");
        DnaLockBlockButton.Pressed = dnaActive;

        // Card Lock Buttons
        CardLockRegisterButton.Visible = !cardRegistered;
        CardLockBlockButton.Visible = cardRegistered;
        CardLockResetButton.Visible = cardRegistered;
        CardLockBlockButton.Text = _loc.GetString(cardActive ? "mech-lock-deactivate" : "mech-lock-activate");
        CardLockBlockButton.Pressed = cardActive;
    }

    private MechBoundUiState? _lastState;

    public void OverrideAccessAndRefresh(bool hasAccess)
    {
        _hasAccess = hasAccess;
        if (_lastState != null)
        {
            var isLocked = _lastState.IsLocked;
            var noAccessActive = isLocked && !_hasAccess;
            SettingsGrid.Visible = !noAccessActive;
            SettingsNoAccessPanel.Visible = noAccessActive;
        }
    }

    private (bool IsRegistered, bool IsActive, string? OwnerId) GetLockState(MechBoundUiState state, MechLockType lockType)
    {
        return lockType switch
        {
            MechLockType.Dna => (state.DnaLockRegistered, state.DnaLockActive, state.OwnerDna),
            MechLockType.Card => (state.CardLockRegistered, state.CardLockActive, state.OwnerJobTitle),
            _ => (false, false, null)
        };
    }

    private (bool IsRegistered, bool IsActive, string? OwnerId) GetCurrentLockState(MechLockType lockType)
    {
        if (_lastState == null)
            return (false, false, null);

        return GetLockState(_lastState, lockType);
    }

    public void UpdateEquipmentView(List<NetEntity>? equipment = null)
    {
        if (equipment == null)
        {
            if (!_entityManager.TryGetComponent<MechComponent>(_mech, out var mechComp))
                return;
            equipment = new List<NetEntity>();
            foreach (var ent in mechComp.EquipmentContainer.ContainedEntities)
                equipment.Add(_entityManager.GetNetEntity(ent));
        }

        EquipmentControlContainer.Children.Clear();
        foreach (var netEnt in equipment)
        {
            var ent = _entityManager.GetEntity(netEnt);
            if (!_entityManager.TryGetComponent<MetaDataComponent>(ent, out var metaData))
                continue;

            var uicomp = _entityManager.GetComponentOrNull<UIFragmentComponent>(ent);
            Control? ui = null;

            if (uicomp?.Ui != null)
            {
                // Setup the UI fragment
                var dummy = new DummyBoundUserInterface(_parentBui);
                uicomp.Ui.Setup(dummy, ent);

                // Update with current state if available
                if (_lastState?.EquipmentUiStates.TryGetValue(netEnt, out var eqState) == true)
                {
                    uicomp.Ui.UpdateState(eqState);
                }

                ui = uicomp.Ui.GetUIFragmentRoot();
            }

            // Get equipment size
            var size = _entityManager.GetComponentOrNull<MechEquipmentComponent>(ent)?.Size ?? 1;

            var control = new MechEquipmentControl(ent, metaData.EntityName, ui, size);
            control.OnRemoveButtonPressed += () => OnRemoveButtonPressed?.Invoke(ent);
            EquipmentControlContainer.AddChild(control);
        }
    }

    public void UpdateModuleView(List<NetEntity>? modules = null)
    {
        if (modules == null)
        {
            if (!_entityManager.TryGetComponent<MechComponent>(_mech, out var mechComp))
                return;
            modules = new List<NetEntity>();
            foreach (var ent in mechComp.ModuleContainer.ContainedEntities)
                modules.Add(_entityManager.GetNetEntity(ent));
        }

        ModuleControlContainer.Children.Clear();
        foreach (var netEnt in modules)
        {
            var ent = _entityManager.GetEntity(netEnt);
            if (!_entityManager.TryGetComponent<MetaDataComponent>(ent, out var metaData))
                continue;

            // Get module size
            var size = _entityManager.GetComponentOrNull<MechModuleComponent>(ent)?.Size ?? 1;

            var control = new MechEquipmentControl(ent, metaData.EntityName, null, size);
            control.OnRemoveButtonPressed += () => OnRemoveModuleButtonPressed?.Invoke(ent);
            ModuleControlContainer.AddChild(control);
        }
    }

    private sealed class DummyBoundUserInterface : BoundUserInterface
    {
        private readonly BoundUserInterface? _parentBui;

        public DummyBoundUserInterface(BoundUserInterface? parentBui = null) : base(EntityUid.Invalid, MechUiKey.Equipment)
        {
            _parentBui = parentBui;
        }

        protected override void Open() { }
        protected override void UpdateState(BoundUserInterfaceState state) { }

        public new void SendMessage(BoundUserInterfaceMessage message)
        {
            // Relay equipment messages to the parent BUI if available
            if (_parentBui != null && message is MechEquipmentUiMessage)
            {
                _parentBui.SendMessage(message);
            }
        }
    }

    /// <summary>
    /// Updates the UI state and refreshes all displays.
    /// </summary>
    public void UpdateState(MechBoundUiState state)
    {
        _lastState = state;
        UpdateMechState(state);
        UpdateMechStats();
        UpdateEquipmentView(state.Equipment);
        UpdateModuleView(state.Modules);
    }
}
