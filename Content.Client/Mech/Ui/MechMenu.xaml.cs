using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Fragments;
using Content.Shared.Mech.Components;
using Content.Shared.Mech;
using Content.Shared.Atmos;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using System.Linq;
using static Robust.Client.UserInterface.Controls.BaseButton;

namespace Content.Client.Mech.Ui;

[GenerateTypedNameReferences]
public sealed partial class MechMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _ent = default!;

    private EntityUid _mech;
    private bool _hasAccess = true;

    public event Action<EntityUid>? OnRemoveButtonPressed;

    public Action<string>? NameChanged;

    public event Action<bool>? OnAirtightChanged;
    public event Action<bool>? OnFanToggle;
    public event Action? OnDnaLockRegister;
    public event Action? OnDnaLockToggle;
    public event Action? OnDnaLockReset;
    public event Action? OnCardLockRegister;
    public event Action? OnCardLockToggle;
    public event Action? OnCardLockReset;

    public MechMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        AirtightButton.OnToggled += args => OnAirtightChanged?.Invoke(args.Pressed);

        DnaLockButton.OnPressed += args =>
        {
            if (!CheckAccess()) return;

            var (isRegistered, isActive, _) = GetCurrentLockState(MechLockType.Dna);
            if (isRegistered)
                OnDnaLockToggle?.Invoke();
            else
                OnDnaLockRegister?.Invoke();
        };
        DnaLockResetButton.OnPressed += args => {
            if (CheckAccess())
                OnLockAction(args, OnDnaLockReset, DnaLockResetButton);
        };

        CardLockButton.OnPressed += args =>
        {
            if (!CheckAccess()) return;

            var (isRegistered, isActive, _) = GetCurrentLockState(MechLockType.Card);
            if (isRegistered)
                OnCardLockToggle?.Invoke();
            else
                OnCardLockRegister?.Invoke();
        };
        CardLockResetButton.OnPressed += args => {
            if (CheckAccess())
                OnLockAction(args, OnCardLockReset, CardLockResetButton);
        };

        FanOffButton.OnToggled += args =>
        {
            if (args.Pressed)
            {
                FanOnButton.Pressed = false;
                OnFanToggle?.Invoke(false);
            }
        };

        FanOnButton.OnToggled += args =>
        {
            if (args.Pressed)
            {
                FanOffButton.Pressed = false;
                OnFanToggle?.Invoke(true);
            }
        };
    }

    private bool CheckAccess()
    {
        return _hasAccess;
    }

    public void SetEntity(EntityUid uid)
    {
        MechView.SetEntity(uid);
        _mech = uid;

        NameLabel.Text = _ent.GetComponent<MetaDataComponent>(_mech).EntityName;
    }

    public void UpdateMechStats()
    {
        if (!_ent.TryGetComponent<MechComponent>(_mech, out var mechComp))
            return;

        var integrityPercent = mechComp.Integrity / mechComp.MaxIntegrity;
        IntegrityDisplayBar.Value = integrityPercent.Float();
        IntegrityDisplay.Text = Loc.GetString("mech-integrity-display", ("amount", (integrityPercent * 100).Int()));

        if (mechComp.MaxEnergy != 0f)
        {
            var energyPercent = mechComp.Energy / mechComp.MaxEnergy;
            EnergyDisplayBar.Value = energyPercent.Float();
            EnergyDisplay.Text = Loc.GetString("mech-energy-display", ("amount", (energyPercent * 100).Int()));
        }
        else
        {
            EnergyDisplayBar.Value = 0f;
            EnergyDisplay.Text = Loc.GetString("mech-energy-missing");
        }

        SlotDisplay.Text = Loc.GetString("mech-slot-display",
            ("amount", mechComp.MaxEquipmentAmount - mechComp.EquipmentContainer.ContainedEntities.Count));
    }

    public void UpdateState(MechBoundUiState state)
    {
        _lastState = state;

        // Update airtight button state
        if (AirtightButton.Pressed != state.IsAirtight)
            AirtightButton.Pressed = state.IsAirtight;

        // Update fan button states
        if (FanOffButton.Pressed != !state.FanActive)
            FanOffButton.Pressed = !state.FanActive;
        if (FanOnButton.Pressed != state.FanActive)
            FanOnButton.Pressed = state.FanActive;

        // Update fan status display
        UpdateFanStatusDisplay(state.FanState);

        // Update cabin gas level
        var maxPressure = Atmospherics.OneAtmosphere;
        CabinGasLabel.Text = Loc.GetString("mech-cabin-gas-level", ("level", $"{state.CabinGasLevel:F1} / {maxPressure:F1}"));

        UpdateLockButtons(state);
        UpdateLockInfoLabels(state);
    }

    private void UpdateFanStatusDisplay(MechFanState fanState)
    {
        var statusText = fanState switch
        {
            MechFanState.Off => Loc.GetString("mech-fan-status-off"),
            MechFanState.On => Loc.GetString("mech-fan-status-on"),
            MechFanState.Idle => Loc.GetString("mech-fan-status-idle"),
            _ => Loc.GetString("mech-fan-status-unknown")
        };

        FanStatusLabel.Text = statusText;
    }

    private void UpdateLockInfoLabels(MechBoundUiState state)
    {
        // Update DNA lock info
        if (state.DnaLockRegistered && !string.IsNullOrEmpty(state.OwnerDna))
        {
            DnaLockInfoLabel.Text = Loc.GetString("mech-lock-dna-info", ("dna", state.OwnerDna));
        }
        else
        {
            DnaLockInfoLabel.Text = Loc.GetString("mech-lock-not-set");
        }

        // Update Card lock info
        if (state.CardLockRegistered && !string.IsNullOrEmpty(state.OwnerCardName))
        {
            CardLockInfoLabel.Text = Loc.GetString("mech-lock-card-info", ("name", state.OwnerCardName));
        }
        else
        {
            CardLockInfoLabel.Text = Loc.GetString("mech-lock-not-set");
        }
    }

    private void UpdateLockButtons(MechBoundUiState state)
    {
        UpdateLockButton(state, MechLockType.Dna, DnaLockButton, DnaLockResetButton,
            OnDnaLockRegister, OnDnaLockToggle, OnDnaLockReset);
        UpdateLockButton(state, MechLockType.Card, CardLockButton, CardLockResetButton,
            OnCardLockRegister, OnCardLockToggle, OnCardLockReset);
    }

    private void UpdateLockButton(MechBoundUiState state, MechLockType lockType,
        Button lockButton, BaseButton resetButton,
        Action? registerAction, Action? toggleAction, Action? resetAction)
    {
        var (isRegistered, isActive, _) = GetLockState(state, lockType);

        // Update button state without changing event handlers
        if (isRegistered)
        {
            if (isActive)
            {
                lockButton.Text = Loc.GetString("mech-lock-deactivate");
                lockButton.Pressed = true;
                lockButton.Disabled = false;
            }
            else
            {
                lockButton.Text = Loc.GetString("mech-lock-activate");
                lockButton.Pressed = false;
                lockButton.Disabled = false;
            }
            resetButton.Visible = true;
        }
        else
        {
            lockButton.Text = Loc.GetString("mech-lock-register");
            lockButton.Pressed = false;
            lockButton.Disabled = !state.HasAccess;
            resetButton.Visible = false;
        }
    }

    private MechBoundUiState? _lastState;

    private (bool IsRegistered, bool IsActive, string? OwnerId) GetLockState(MechBoundUiState state, MechLockType lockType)
    {
        return lockType switch
        {
            MechLockType.Dna => (state.DnaLockRegistered, state.DnaLockActive, state.OwnerDna),
            MechLockType.Card => (state.CardLockRegistered, state.CardLockActive, state.OwnerCardName),
            _ => (false, false, null)
        };
    }

    private (bool IsRegistered, bool IsActive, string? OwnerId) GetCurrentLockState(MechLockType lockType)
    {
        if (_lastState == null)
            return (false, false, null);

        return GetLockState(_lastState, lockType);
    }

    private void OnLockAction(ButtonEventArgs args, Action? action, BaseButton button)
    {
        action?.Invoke();
        button.Pressed = false;
    }

    public void UpdateEquipmentView(List<NetEntity>? equipment = null)
    {
        if (equipment == null)
        {
            if (!_ent.TryGetComponent<MechComponent>(_mech, out var mechComp))
                return;
            equipment = new List<NetEntity>();
            foreach (var ent in mechComp.EquipmentContainer.ContainedEntities)
                equipment.Add(_ent.GetNetEntity(ent));
        }

        EquipmentControlContainer.Children.Clear();
        foreach (var netEnt in equipment)
        {
            var ent = _ent.GetEntity(netEnt);
            if (!_ent.TryGetComponent<MetaDataComponent>(ent, out var metaData))
                continue;

            var uicomp = _ent.GetComponentOrNull<UIFragmentComponent>(ent);
            var ui = uicomp?.Ui?.GetUIFragmentRoot();

            var control = new MechEquipmentControl(ent, metaData.EntityName, ui);
            var entityToRemove = ent;
            control.OnRemoveButtonPressed += () => OnRemoveButtonPressed?.Invoke(entityToRemove);

            EquipmentControlContainer.AddChild(control);
        }
    }
}
