using Content.Shared.Mech;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Mech.Ui.Equipment;

/// <summary>
/// UI fragment for displaying and managing items in a mech grabber.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class MechGrabberUiFragment : BoxContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly ILocalizationManager _loc = default!;

    public event Action<EntityUid>? OnEjectAction;

    public MechGrabberUiFragment()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateContents(MechGrabberUiState state)
    {
        SpaceLabel.Text = _loc.GetString("mech-grabber-capacity",
            ("current", state.Contents.Count), ("max", state.MaxContents));

        for (var i = 0; i < state.Contents.Count; i++)
        {
            var ent = _entityManager.GetEntity(state.Contents[i]);

            if (!_entityManager.TryGetComponent<MetaDataComponent>(ent, out var meta))
                continue;

            ItemList.AddItem(meta.EntityName);
            ItemList[i].OnSelected += _ => OnEjectAction?.Invoke(ent);
        }
    }
}
