using Content.Shared.Mech;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Mech.Ui.Equipment;

/// <summary>
/// UI fragment for displaying and managing items in a mech grabber.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class MechGrabberUiFragment : BoxContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly ILocalizationManager _loc = default!;

    public event Action<EntityUid>? OnEjectAction;

    public MechGrabberUiFragment()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateContents(MechGrabberUiState state)
    {
        // Clear existing items
        ItemList.Clear();

        // Update capacity display
        SpaceLabel.Text = _loc.GetString("mech-grabber-capacity",
            ("current", state.Contents.Count), ("max", state.MaxContents));

        // Add items to list
        foreach (var netEntity in state.Contents)
        {
            var entity = _entityManager.GetEntity(netEntity);

            if (!_entityManager.TryGetComponent<MetaDataComponent>(entity, out var meta))
                continue;

            var item = ItemList.AddItem(meta.EntityName);
            item.OnSelected += _ => OnEjectAction?.Invoke(entity);
        }
    }
}
