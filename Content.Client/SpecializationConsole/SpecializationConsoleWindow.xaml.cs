using System.Linq;
using System.Numerics;
using Content.Client.Lobby;
using Content.Client.SpecializationConsole.Controls;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Access;
using Content.Shared.Access.Components;
using Content.Shared.Access.Systems;
using Content.Shared.Administration;
using Content.Shared.CCVar;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Content.Shared.SpecializationConsole;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Network;
using Robust.Shared.Prototypes;

namespace Content.Client.SpecializationConsole;

[GenerateTypedNameReferences]
public sealed partial class SpecializationConsoleWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    [Dependency] private readonly IResourceCache _cache = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IClientPreferencesManager _preferencesManager = default!;
    [Dependency] private readonly IUserInterfaceManager _userInterfaceManager = default!;
    [Dependency] private readonly IClientNetManager _netManager = default!;
    [Dependency] private readonly IConfigurationManager _configurationManager = default!;
    private readonly AccessReaderSystem _accessReader;

    private EntityUid? _dummy;
    private EntityUid? _owner;
    private HumanoidCharacterProfile? _profile;
    private ProtoId<JobPrototype>? _job;
    private string? _spec;

    private MonotoneDialogWindow? _dialogWindow;
    private int _maxLength;
    public event Action<string>? OnDialogConfirmed;

    public SpecializationConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _accessReader = _entManager.System<AccessReaderSystem>();

        CloseButton.OnPressed += _ => Close();

        SetButton.OnPressed += _ => OnSetSpecializationButtonPressed();
        DeleteButton.OnPressed += _ =>
        {
            _spec = null;
            EmployeeInfo.SetJobSpec(_spec);
        };

        _maxLength = _configurationManager.GetCVar(CCVars.MaxJobSpecLength);
    }

    private void OnSetSpecializationButtonPressed()
    {
        var field = "specialization";
        var prompt = Loc.GetString("criminal-records-console-reason");
        var entry = new QuickDialogEntry(field, QuickDialogEntryType.ShortText, prompt);
        var entries = new List<QuickDialogEntry> { entry };

        if (_dialogWindow != null && _dialogWindow.IsOpen)
        {
            _dialogWindow.OpenCentered();
            return;
        }

        _dialogWindow = new MonotoneDialogWindow(entries, _maxLength);

        _dialogWindow.OnConfirmed += specs =>
        {
            var spec = specs[field];
            if (spec.Length < 1 || spec.Length > _maxLength)
                return;

            OnDialogConfirmed?.Invoke(spec);
            _spec = spec;
        };

        _dialogWindow.OnClose += () =>
        {
            _dialogWindow = null;
            EmployeeInfo.SetJobSpec(_spec);
        };

    }
    public void SetEntity(EntityUid uid, SpriteView sprite) => sprite.SetEntity(uid);

    public void ClearEntity(SpriteView sprite) => sprite.SetEntity(null);

    public void SetOwner(EntityUid owner) => _owner = owner;

    public void UpdateState(SpecializationConsoleBoundInterfaceState state)
    {
        EntityUid? privilegedItem;
        EntityUid? targetItem;
        AccessBox.DisposeAllChildren();
        EmployeeInfo.EntityViewBox.DisposeAllChildren();

        if (!_entManager.TryGetComponent<SpecializationConsoleComponent>(_owner, out var specializationConsole))
            return;
        if (specializationConsole.PrivilegedIdSlot.Item is { Valid: true } item)
        {
            privilegedItem = item;
            SetEntity(privilegedItem.Value, EntityView);

            if (!_entManager.TryGetComponent<IdCardComponent>(privilegedItem, out var idCard))
                return;
            foreach (var department in idCard.JobDepartments)
            {
                var departmentLabel = new RichTextLabel();
                departmentLabel.SetMessage($"[{department.Id}]");
                AccessBox.AddChild(departmentLabel);
            }
        }
        else
        {
            ClearEntity(EntityView);
            privilegedItem = null;
        }

        if (specializationConsole.TargetIdSlot.Item is { Valid: true } tItem)
        {
            targetItem = tItem;
            _job = state.Job;
            _profile = state.Profile;
            _spec = state.TargetIdJobSpec;

            if (_job != null && _prototype.TryIndex(_job, out var jobProto))
                _dummy = _userInterfaceManager.GetUIController<LobbyUIController>().LoadProfileEntity(_profile, jobProto, true);
            else if (_profile is null)
                _dummy = _entManager.Spawn("PlushieLizard");

            SetEntity(targetItem.Value, TargetEntityView);
            EmployeeInfo.SetInfo(state.TargetIdFullName, state.TargetIdJobTitle, _spec);
            EmployeeInfo.SetSprite(_dummy);
        }
        else
        {
            ClearEntity(TargetEntityView);
            EmployeeInfo.SetSprite(null);
            EmployeeInfo.SetInfo(null, null, null);
            targetItem = null;
        }

        if (privilegedItem != null && targetItem != null)
        {
            SetButton.Disabled = DeleteButton.Disabled = CheckAccess(privilegedItem.Value, targetItem.Value);
        }
    }

    private bool CheckAccess(EntityUid privilegedItem, EntityUid targetItem)
    {
        var privilegedTags = _accessReader.FindAccessTags(privilegedItem);
        var targetTags = _accessReader.FindAccessTags(targetItem);

        if (privilegedTags.Contains("Captain") &&
            targetTags.Contains("CentralCommand"))
            return true;
        if (privilegedTags.Contains("CentralCommand"))
            return false;

        if (privilegedTags.Contains("Command"))
        {
            foreach (var tag in privilegedTags)
            {
                if (tag == "Maintenance")
                    continue;

                if (targetTags.Contains(tag))
                    return false;
            }
        }

        return true;
    }
}
