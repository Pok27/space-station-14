using System.Configuration;
using System.Linq;
using System.Numerics;
using System.Text.RegularExpressions;
using Content.Client.Access.UI;
using Content.Client.CrewManifest;
using Content.Client.CrewManifest.UI;
using Content.Client.Lobby;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Fragments;
using Content.Shared.Access;
using Content.Shared.Access.Components;
using Content.Shared.Access.Systems;
using Content.Shared.Containers.ItemSlots;
using Content.Shared.CrewManifest;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Content.Shared.SpecializationConsole;
using Content.Shared.TurretController;
using Content.Shared.Turrets;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.GameStates;
using Robust.Client.Player;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using SDL3;

namespace Content.Client.SpecializationConsole;

[GenerateTypedNameReferences]
public sealed partial class SpecializationConsoleWindow : BaseWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    [Dependency] private readonly IResourceCache _cache = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IClientPreferencesManager _preferencesManager = default!;
    [Dependency] private readonly IUserInterfaceManager _userInterfaceManager = default!;
    [Dependency] private readonly IClientNetManager _netManager = default!;

    private EntityUid? _dummy;
    private EntityUid? _owner;
    private HumanoidCharacterProfile? _profile;
    private ProtoId<JobPrototype>? _job;
    public event Action<string>? OnDialogConfirmed;

    public event Action? EmployeeDataRequest;

    public SpecializationConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        CloseButton.OnPressed += _ => Close();

        // AccessConfiguration.OnDialogConfirmed += spec => OnDialogConfirmed?.Invoke(spec);

        // Override footer font
        var smallFont = _cache.NotoStack(size: 8);
        Footer.FontOverride = smallFont;
    }
    private void Initialize()
    {
    }

    public void SetEntity(EntityUid uid, SpriteView sprite)
    {
        sprite.SetEntity(uid);
    }

    public void ClearEntity(SpriteView sprite)
    {
        sprite.SetEntity(null);
    }


    public void SetOwner(EntityUid owner)
    {
        _owner = owner;

        Initialize();
    }
    public void UpdateState(SpecializationConsoleBoundInterfaceState state)
    {
        AccessBox.DisposeAllChildren();


        if (!_entManager.TryGetComponent<SpecializationConsoleComponent>(_owner, out var specializationConsole))
            return;
        if (specializationConsole.PrivilegedIdSlot.Item is { Valid: true } privilegedItem)
        {
            SetEntity(privilegedItem, EntityView);

            if (!_entManager.TryGetComponent<IdCardComponent>(privilegedItem, out var idCard))
                return;
            foreach (var department in idCard.JobDepartments)
            {
                var departmentLabel = new RichTextLabel
                {
                    Margin = new Thickness(5, 0, 5, 0),
                };
                departmentLabel.SetMessage($"[{department.Id}]");
                AccessBox.AddChild(departmentLabel);
            }
        }
        else
        {
            ClearEntity(EntityView);
        }

        if (specializationConsole.TargetIdSlot.Item is { Valid: true } targetitem)
        {
            _job = state.Job;
            _profile = state.Profile;

            if (_job != null && _prototype.TryIndex(_job, out var jobProto))
            {
                _dummy = _userInterfaceManager.GetUIController<LobbyUIController>()
                    .LoadProfileEntity(_profile, jobProto, true);
            }
            else if (_job is null && _profile is null)
            {
                _dummy = _entManager.Spawn("PlushieLizard");
            }

            SetEntity(targetitem, TargetEntityView);
            EmployeeInfo.SetInfo(state.TargetIdFullName, state.TargetIdJobTitle, state.TargetIdJobSpec);
            EmployeeInfo.SetSprite(_dummy);
        }
        else
        {
            ClearEntity(TargetEntityView);
            EmployeeInfo.SetSprite(null);
            EmployeeInfo.SetInfo(null, null, null);
        }
    }
    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return DragMode.Move;
    }
}
